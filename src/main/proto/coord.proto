syntax = "proto3";

option java_multiple_files = true;
option java_package = "it.polimi.ds.proto";

import "addr.proto";

enum ReturnCode {
  OK = 0;
  INVALID_PROGRAM = 1;
  NOT_ENOUGH_RESOURCES = 2;
}

enum Role {
  WORKER = 0;
  MANAGER = 1;
  CLIENT = 2;
}

message AllocationRequest {
  repeated ProtoAddress allocators = 1;
  int32 number_of_allocations = 2;
  bytes raw_program = 3;
}
message AllocationResponse { ReturnCode code = 1; }

message ClientRequest {
  oneof request {
    DataRequest data_request = 1;
    CloseRequest close_request = 2;
  }
}

message WorkerManagerRequest {
  oneof request {
    CheckpointRequest checkpoint_request = 1;
    DataResponse result = 2;
    FlushResponse flush_response = 3;
  }
}

message DataRequest {
  int64 task_id = 1;
  int64 computation_id = 2;
  int64 source_task = 3;
  Role source_role = 4;
  repeated Data data = 5;
  optional int64 crashed_group = 6;
}
message DataResponse {
  int64 computation_id = 1;
  int64 source_task = 2;
  repeated Data data = 3;
}

message CloseRequest {}
message CloseResponse {}

message CheckpointRequest {
  int64 computation_id = 1;
  int64 source_task_id = 2;
  int32 is_from_another_checkpoint = 3;
  repeated Data data = 4;
}

message CheckpointResponse {}

message RegisterNodeManagerRequest {
  ProtoAddress address = 1;
  int32 task_slots = 2;
}

message SynchRequest {}
message SynchResponse {}

message RegisterNodeManagerResponse {
  int64 id = 1;
  int32 group_size = 2;
  repeated ProtoTask tasks = 3;
  repeated ProtoComputation computations = 4;
}

message ProtoTask {
  int64 id = 1;
  int64 group_id = 2;
  int32 is_checkpoint = 3;
}

message ProtoComputation {
  int64 group_id = 1;
  repeated ManagerTaskMap managers_mapping = 2;
  repeated Operation operations = 3;
}

message ManagerTaskMap {
  int64 manager_successor_id = 1;
  repeated int64 task_id = 2;
}

message Data {
  int32 key = 1;
  int32 value = 2;
}
message Operation {
  int32 operator_name = 1;
  int32 function_name = 2;
  int32 input = 3;
}

message ControlWorkerRequest {
   oneof request {
      UpdateNetworkRequest update_network_request = 1;
      CloseRequest close_request = 2;
      FlushRequest flush_request = 3;
   }
}

message FlushRequest {
   int64 computation_id = 1;
   repeated int64 groups_id = 2;
}

message FlushResponse {
   int64 computation_id = 1;
};

message UpdateNetworkRequest {
  repeated ProtoAddress addresses = 1;
  repeated int64 task_manager_ids = 2;
}

message UpdateNetworkResponse {}
